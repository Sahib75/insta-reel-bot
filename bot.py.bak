from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import os
import logging
import asyncio
from telegram import Update
from config import BOT_TOKEN
import yt_dlp

# Load environment variables
load_dotenv()

# Print environment tokens for debug (optional, remove in production)
print("BOT TOKEN:", os.getenv("BOT_TOKEN"))
print("IG COOKIE:", os.getenv("IG_COOKIE"))

# Get token securely
BOT_TOKEN = os.getenv("BOT_TOKEN")
IG_COOKIE = os.getenv("IG_COOKIE")

print(f"[DEBUG] TOKEN: {BOT_TOKEN}")  # Temporary print for log checking

# Enable Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã Send me an Instagram Reel link to download.")


# Error handler
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)


# Reel downloader logic
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if "instagram.com/reel" in text:
        await update.message.reply_text("üì• Downloading the Reel...")

        try:
            ydl_opts = {
                'outtmpl': 'reel.%(ext)s',
                'format': 'mp4',
                'cookiefile': None
            }

            # Set cookies if available
            if IG_COOKIE:
                ydl_opts["cookiefile"] = None  # Modify this if saving cookies to a file

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(text, download=True)
                file_path = ydl.prepare_filename(info)

            await update.message.reply_video(video=open(file_path, 'rb'))

            # Clean up
            os.remove(file_path)

        except Exception as e:
            logger.error(f"Download error: {e}")
            await update.message.reply_text("‚ö†Ô∏è Failed to download. Link may be private or invalid.")
    else:
        await update.message.reply_text("‚ùå Please send a valid Instagram Reel link.")


# Start the async main function
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_error_handler(error_handler)

    webhook_url = f"https://instareelbot-production.up.railway.app/webhook/{BOT_TOKEN}"

    await application.initialize()
    await application.bot.set_webhook(url=webhook_url)

    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=webhook_url
    )

    await application.start()
    print("Bot is running...")
    await application.updater.start_polling()
    await application.updater.idle()
    await application.stop()
    await application.shutdown()


if __name__ == "__main__":
    asyncio.run(main())
